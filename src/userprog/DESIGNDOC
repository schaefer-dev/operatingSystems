		     +--------------------------+
		     |            OS            |
		     | PROJECT 2: USER PROGRAMS |
		     |     DESIGN DOCUMENT      |
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Daniel Sch√§fer <s9dlscae@stud.uni-saaland.de>
Christian Bohnenberger <s9cnbohn@stud.uni-saaland.de>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

man strtok

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct lock lock_filesystem;
global lock defined in syscall.h which is used in load to protect against
data races during the exectution of load()

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

The first important step regarding Argument Passing is the execution
of process_execute. In this function we make sure to copy the passed
file_name into a new page. (which is important to avoid races between
the caller and the load process of the newly started process. In this new
page we use strtok_r to extract the first "word" contained in the passed
string. This first word is the command_name (name of executable) which
is being passed to thread_create together with the page of the entire
string. It is obviously very important to free the newly allocated page
after thread_create is finished.

When start_process is being called later on, we tokenize the arguments
contained in the page we passed over to thread_create again by using
strtok_r. During the tokenizing Process we use strlpy with size tokensize+1
because we have to guarantee the terminating \0 character after each argument
token.

These arguments are pushed (in reverse order) to a argument_page
which we allocate to store the arguments of this process which will later
be put on the stack according to C 80x86 Calling Convention. We push them
in reverse order, to make the process of building the stack in stack_setup
easier.

start_process eventually calls load and passes the filename and the page
which contains the tokenized arguments in reverse order. Again it is important
to free the allocated pages after load() has returned.

setup_stack is being called during the load execution and takes care
of building the stack according to C 80x86 Calling Convention. It takes
the arguments contained in the argument page one by one and decrements the
esp (starting at PHYS_BASE) according to the size of this token and verifies
if the esp is still valid in the current context (not outside page etc. to
avoid overflowing the stack).
The stack is built exactly as explained in Section 3.5.1 Program Startup
Details (again - everything one by one with verification of esp before any
data is being written!) You have to be very careful while decrementing the
ESP, because some values are characters (1byte) some are pointers (4byte)
and others are int (4bytes).


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() can be called in multiple threads simultaneously or in nested
loops because every execution of strtok_r has its own pointer which tracks
the context of this strtok_r execution which is proided by the caller.
Strtok does not allow the caller to pass this pointer and just has this
context internally for the next execution (which could be somewhere else
-> data races) Pintos uses strtok_r because the kernel needs to be reentrant.


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

A big advantage of this is very obvious: We would spend less time in the
Kernel which is advantagous for the overall system performance. 

Additionally this check would enable us to verify the existance of the
executable and checking the arguments before they are being passed (e.g.
max size). It would also be possible to apply certain preprocessing
in general to these arguments, which might e.g. save instructions by
optimizing something like "cd; cd home; cd test;" to "cd ~/home/test".
While all this might be possible in the Kernel, it would add a lot of
complexity and potential issues to it, which is a bad idea (keyword:
Abstraction)

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Additions to struct thread:
    /* List of all open files of this thread. */
    struct list file_list;
    this list contains values of type: struct file_entry which correspond
    to this thread. (explanation of file_entry below)

    /* List of all child processes of this thread */
    struct list child_list;
    this List contains all children of this process of type:
    struct child_process which correspond to this thread (which acts as parent)

    /* the executable of this thread */
    struct file *executable;
    the open file which is being executed in this thread (important to close
    it after thread exits)

    /* lock to protect operations in child_list */
    struct lock child_list_lock;
    this lock guarantees that at most one thread can work on the child_list
    (explained above) at the same time to avoid data races

    /* save the reference of its own child_process struct to
      change the load status after load is done */
    struct child_process *child_process;
    The struct child_process contains values like exit_value, etc. for
    this thread which can be accessed by this threads parent.

    /* Counter to give every file in file list a unique fd */
    int current_fd;
    Counter for file_descriptor, which guarantees that every file descriptor
    in this thread has a unique int.


New Struct file_entry:
    /* Struct to save open files of a thread in a linked list */
    struct file_entry
      {
        struct file *file;
        int fd;
        struct list_elem elem; 
      };
    this struct contains the reference to the open file and the unique
    file descriptor int corresponding to it.


New Struct child_process:
    /*  every process which is created by a parent process is considered a
        child process and contains a struct child_process which stores all
        important values for child processes */
    struct child_process
      {
        int exit_status;
        pid_t pid;
        pid_t parent;
        bool terminated;
        bool waited_for;
        int successfully_loaded;
        struct lock child_process_lock;
        struct condition loaded;
        struct condition terminated_cond;
        struct list_elem elem;
      };

      - exit_status saves the status with which this thread (every child_process
      belongs to exactly 1 thread) exited.
      - pid saves the process id of this particular thread/child
      - parent saves the process id of the parent of this particular
      thread/child
      - terminated contains whether the process/child has already
      exited.
      - waited_for tracks if the parent of this child is waiting for
      this child to terminate.
      - successfully_loaded contains the returnvalue of load, which has
      to be accessible to the parent.
      - child_process_lock is important to guarantee that at most one
      thread is reading/writing information inside this struct (because
      parent and child access this struct)
      - loaded is being signaled after laod is finished, so that parent
      gets notified as soon as load finished successfully or not.
      - terminated_cond is being signaled after the child has exited,
      because parent might be waiting for this child.

typedef int pid_t;
      pid_t is an int and equivalent to tid_t (1:1 mapping)

  /* NOT_LOADED value for processes which are still in 
    the process of loading */
  #define NOT_LOADED 0
  #define LOAD_SUCCESS 1
  #define LOAD_FAILURE 2
  These values are being used to save valus into the loaded field of struct
  child_process.


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are being created in the syscall_open and are unique only
withing a single process. This is sufficient (and better) because
file descriptors can only be used inside the process in which they are being
created because every thread can only access its own file descriptors.
Closing a file will result in the removal of the file_entry structure belonging
to this file and additionally remove this entry in the file_list list
belonging to the running process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Reading:

  We extract the arguments of syscall_read by reading it from the intr_frame f.
  Afterwards it is very important to verify the passed buffer. This happens by
  iterating over the buffer and verifying every single pointer contained in this
  buffer until offset "size" has been reached. 

  Pointer validation checks if the pointer is not NULL, if the pointer is in the
  user virtual adress space (is_user_vaddr(pointer)) and if there is a valid
  page at this address (by checking pagedir_get_page(pagedir, pointer) is not
  NULL). If one of this contitions is violated, pointer validation will invoke a
  syscall_exit(-1)

  After the buffer has been validated, we check the value of the file
  descryptor. If STDOUT_FILENO has been passed we return -1, if STDIN_
  FILENO has been passed we iterate over the buffer and write the return
  value of input_getc() to the current adress. For every other file descryptor
  value we open the file corresponding to this descryptor (on fail we return 0)
  We then use the function "file_read" to write the content of the passed
  file to the buffer. Because we are reading from disk with file_read it is
  important to acquire the filesystem lock before executing and releasing it
  afterwards. In any case we return the amount of bytes being read
  successfully.


Writing: (mostly the same)
  
  We extract the arguments of syscall_write by reading it from the intr_frame f.
  Afterwards it is very important to verify the passed buffer. This happens by
  iterating over the buffer and verifying every single pointer contained in this
  buffer until offset "size" has been reached. 

  Pointer validation checks if the pointer is not NULL, if the pointer is in the
  user virtual adress space (is_user_vaddr(pointer)) and if there is a valid
  page at this address (by checking pagedir_get_page(pagedir, pointer) is not
  NULL). If one of this contitions is violated, pointer validation will invoke a
  syscall_exit(-1)

  After the buffer has been validated, we check the value of the file
  descryptor. If STDIN_FILENO has been passed we return -1, if STDOUT_
  FILENO has been passed we call putbuf(buffer,size) which will print size
  amount of characters from the buffer to STDOUT.
  For every other file descryptor
  value we open the file corresponding to this descryptor (on fail we return 0)
  We then use the function "file_write" to write the content of the passed
  buffer to the opened file. Because we are writing to disk with file_write it
  is important to acquire the filesystem lock before executing and releasing it
  afterwards. In any case we return the amount of bytes being written
  successfully.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

full page:
  We assume that pages are continous, which would mean that would have at
  least 1 inspection and at most 2. At least 1 because in the case of
  receiving the page start (which can be identified using the reference
  and modulu calculation), we know that an entire page is "following".
  At most 2 because, we have to check for 1) the start 2) the end of the
  page to see if its mapped.

2bytes:
  At least 1 inspection, because we have to check if we are inside the page
  (not at the very end, which can again be determined by modulu calculation).
  And at most 2 inspections because we just have to check if both bytes are
  inside the page.

We don't see any room to improve, but its probably a good idea to have
continious pages of fixed size, so you can use modulu operation to achieve
a low amount of average inspections.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Process_wait will at first check if the passed child-tid matches to any
of its childs, otherwise return -1. When the child is contained in the
list of childs of the calling Process we at first check if this child has
already been waited for (not allowed to wait twice for the same pid).
During the access of the child->waited_for field, the child struct is being
locked by acquiring the child_process_lock of this particular child.

If this child has not been waited for already we mark it as being waited for
and check if it already terminated. If not we wait for a termination signal
sent by this particular child. If it does or has already terminated we return
with the exit_status of this child, which is also saved in its child_process
struct and release the lock for this child_process. 

It is important to wait for the termination signal if the child is not already
marked as terminated, because the parent has no idea when the child will finish
its "work". Thats the reason why we need synchronization with process
termination. Assuming the child has already terminated - it is very simple
because a child which terminates and still has a parent which has not
terminated will not remove/free any values in its child_process struct. So the
parent is always able to access a childs exit_status regardless of how long
the exit of this child is already ago.

As explained above already the signal of the child termination is being sent
during exit (explained in detail in different question).


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

As already mentioned in the Write/Read part:
  Pointer validation checks if the pointer is not NULL, if the pointer is in the
  user virtual adress space (is_user_vaddr(pointer)) and if there is a valid
  page at this address (by checking pagedir_get_page(pagedir, pointer) is not
  NULL). If one of this contitions is violated, pointer validation will invoke a
  syscall_exit(-1).

  syscall_exit will take care of freeing all allocated ressources.
  It is guaranteed that no locks can be held when syscall_exit is called,
  because we make sure to validate every pointer before any locks are
  being acquired. In general it is not possible for a syscall_exit to occur
  while a lock is being held anywhere in our code.

  In the execution of syscall_exit we have to check if the terminated
  process is a child process and if yes, if its parent is still running.

 
  This is absolutely essential to check, because we have to keep the values
  stored in struct child_process for every child until the parent exits. If
  a parent exits it will free the child_process structure of every child
  which already terminated before the parent. Every child which is left
  because it was still running when parent exited now has to free the
  child_process structure of itself when it exits. To ensure that all
  this is happening, we have to 1) use a lock to access values of each
  child_process (this lock is stored in child_process itself) and a seperate
  lock to work on the list of child processes (this list is held by the parent
  process). Every child also sends a signal to its parent whenever it
  terminates. (this is imporant to implement the wait functionallity).

  Our strategy guarantees that either child or the parent are freeing
  the ressources allocated for the child-parent structure and it is
  impossible for any structs etc. to not be freed by either of them.

  Additionally syscall_exit makes sure to free all file descryptors which are
  currently being held by this thread.

  Afterwards thread_exit is being called which removes the thread from
  the list of running threads closes the opened executable file (if it has
  one), and invokes the freeing of all ressources of terminated childs
  (as explained above) and calls process_exit if the thread is a userprogram.

  For example Thread A starts and pointer_verification fails, which results
  in syscall_exit(-1) to be called. syscall_exit will check if this program
  is a child_process, this is not the case - so it will just close all file
  descryptors being held by Thread A. Afterwards it will print the exit message
  and call thread_exit(). This will close the executable of this Thread
  if there is one and check if Thread A has any children in method
  thread_terminate_child_setup() which it doesnt, so the thread status will
  be set to dying. Afterwards a new process will be scheduled.

  We also made sure to call syscall_exit inside page_fault (exception.c)
  because VM will be implemented in Project 3 and our Programs have to be
  able to recover from Page faults. We made sure to only invoke this exit
  if the fault_addr is NULL or if a user tried to access non-user-vaddr or
  if the user did not have this page in their pagedir or if it tried to write
  to a read-only page.


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

When a child process is created it sets successfully_loaded = NOT_LOADED.
And after the load function has finished it will send a signal to a
(maybe) waiting parent. After this signal was being sent parent can
access the successfully_loaded field in child_process which now contains
either LOAD_SUCCESS or LOAD_FAILURE. When we write into the successfully_
loaded field, we always acquire the lock of this particular child_process
first. So no races on any of the field are possible. After it is being
written (updated) we have to use the signal to wake up a parent which is
potentially waiting for our loading to finish.
The parent is waiting inside the syscall_exec in a
while(successfully_loaded==NOT_LOADED) loop in which it waits for the
child to signal a update on this successfully_loaded field. If the value
in the successfully_loaded field is LOAD_FAILURE after receiving the signal
the parent syscall_exec will return -1.


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Everything has been explained above already in detail. In general
we use condition variables combined with fields in our child_process struct
which indicate the termination and loading status of child/parent.
A exiting parent will free all resources of already terminated childs
(and its own structure) while childs will only free their child_process
structure whenever their parent has already terminated (indicated by
child_structure->parent = -1).


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We decided to implement the easier approach (validating the pointer before
dereferencing it) because we felt much more confident in implementing this
and we expected error resistance to be much more important than very small
performance improvements (if using MMU).

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

The big advantage of storing file descriptors inside the struct thread is
that we have to iterate over a much much smaller list when we are looking
for a particular opened file. The disadvantage is that we are still iterating
over a List O(n) with average O(n/2). Sorting this list would help a bit,
because you could use binary-search. But since there are many insert (open)
the overhead to sorted list is quite significant. And closing/freeing all file
descryptors on thread_exit is very cheap (because we can just pop one by one)
even with an unsorted list. The best approach would be to use a hashmap
mapping file descryptors to the open file.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We decided to use pid_t as tid_t as identity mapping, because we did
not see any advantages to a different approach.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

Filling out this designdoc sufficiently is very hard (especially because
brief is very subjective and so is completeness of our answers) and
annoying. It would probably be a good idea to replace these DESIGNDOCS
by CODE Reviews / Interviews.