		    +---------------------------+
		    |             OS            |
		    | PROJECT 3: VIRTUAL MEMORY |
		    |      DESIGN DOCUMENT      |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Daniel Sch√§fer <s9dlscae@stud.uni-saaland.de>
Christian Bohnenberger <s9cnbohn@stud.uni-saaland.de>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In sup_page.h:

#define STACK_SIZE (8 * 1048576)

STACK_SIZE determines the maximum of a stack in our case 8 MB.


/* Different statuses the page can have */
enum page_status
  {
    PAGE_STATUS_NOT_LOADED = 1,          /* page not loaded */
    PAGE_STATUS_LOADED = 2,              /* Page Loaded */
    PAGE_STATUS_SWAPPED = 4,             /* Page Eviced and writen to SWAP */
  };

Page status determines the current state of a page to check whether it loaded
or the location from where it has to be loaded. 

/* Different types the page can have */
enum page_type
  {
    PAGE_TYPE_FILE = 1,
    PAGE_TYPE_STACK = 2,
    PAGE_TYPE_MMAP = 4,
  };

Page type is used to distinguish the possible types of a type to choose the
correct function to load/delete a page.


struct sup_page_entry
  {
    enum page_status status;
    enum page_type type;

    /* physical address of supplemental page */
    void *phys_addr; 

    /* Virtual Memory adress this page will be loaded to in a page fault */
    void *vm_addr;

    /* swap sector of swapped page */
    block_sector_t swap_addr;

    /* thread this frame belongs to */
    struct thread *thread;

    /* offset at which this page starts reading the referenced file */
    off_t file_offset;

    /* size of read_bytes in file at position file_offset*/
    off_t read_bytes;

    /* file from which we read our data */
    struct file *file;

    /* id to identify mmap */
    int mmap_id;

    /* bool to indicate if file/page is writable */
    bool writable;

    /* bool to indicate if the page is pinned */
    bool pinned;

    /* bool to indicate if the page is dirty */
    bool dirty;

    /* palloc flags which are used when the frame is created */
    enum palloc_flags pflags;

    /* locks changes in struct sup_page_entry */
    struct lock page_lock;

    struct hash_elem h_elem;
  };

- sup_page_entry: data strcuture to store suppplemental pages, every threat 
  has a hashmap of sup_page_entries

- status: indicates the current status of the page (loaded, swapped, not_loaded)

- type: indicates the type of the page (mmap, file, stack)

- phys_addr: pyhsical address of this page. NULL if page is not loaded else
 the pysical address of the frame if page is loaded

- vm_addr: the unique virtual address of the page within this process (used as
 key of the hashmap)

- thread: thread to which the page belongs to

- file_offset: offset within file to know where to read/write the file in case
 of page fault or write back (-1 in case of stack)

- read_bytes: number of bytes to read/write in the file in case of page fault
 or write back (-1 in case of stack)

- file: file from which data are read

- mmap_id: unique mmap id for a process to identify the mmap

- writable: indicates if page is writable or read-only

- pinned: boolean to indicate whether page may be evicted

- dirty: boolean to indicate if the page was dirty before being evicted. 

- pflags: flags to allocate page with correct flags

- page_lock: lock used such that field in sup_page_entry
(e.g. status) can be read and written safely

- h_elem: hash_elem to store sup_page_entry in hashmap

In frame.h:

struct lock frame_lock;

- frame_lock: global lock to ensure that frames are safely added/deleted

struct lock grow_stack_lock;

- grow_stack_lock: global lock to ensure that only one stack_growth at a
 time can happen


struct frame
  {
    /* physical address of frame */
    void *phys_addr;               

    /* supplemental Page Table Entry in which this frame is stored. */
    // for shared memory implementation, this will change into a list of sup_page_entries
    struct sup_page_entry *sup_page_entry;

    struct list_elem l_elem;
  };

- struct frame: struct to store physical memory pages

Fields:
- pyhs_addr: physical address of this frame (received by palloc_get_page)

- sup_page_entry: page to which this frame belongs to, necessary to be able
  to uninstall this page on eviction

- l_elem: list_elem to store frames in a list

In frame.c:
- static struct list frame_list: list to store all current used frames

- struct list_elem *clock_iterator: iterator which points to the next frame
 which is check in case of page eviction (start of clock algorithm iteration)

In thread.h:

- struct hash sup_page_hashmap: hashmap to store all supplemental pages of
a thread

- void* syscall_esp: field to store the esp whenever a syscall occurs, to
be able to access it during a page fault.


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

If the page is already loaded the frame exists and the access to the frame
succeeds using the pagedir of the thread which links the virtual adress
to the corresponding physical adress where this frame is currently stored.

If a page fault occurs:
1.) We search for a sup_page_entry in exception.c using vm_sup_page_lookup
with the current thread and the virtual address which casued the page fault,
however this address is rounded down using pg_round_down to find the page
in which this virtual adress is contained.

case 1: no supplemental page for this virtual adress found
2.1.) We check if the condition for stack_growth is fulfilled and calls 
vm_grow_stack if the condition holds. This function acquires the 
grow_stack_lock and creates a new sup_page_entry of type stack using 
vm_sup_page_allocate.
In the next step we acquire the lock of the newly generated sup_page_entry
and call vm_frame_allocate to get a physical page. Afterwards the held locks
are released.

case 2: supplemental page for this virtual adress found
2.2.) We call vm_sup_page_load on the found sup_page_entry. This function first
acquires the page_lock of this sup_page_entry and pins the page, which avoids 
that it can be accessed in a eviction during the loading process. 
If the status indicates the page is swapped we call vm_load_swap on this
sup_page_entry to load the page. (This will be explained in more detail later
on).
If the page is not loaded or swapped we call vm_load_file on this sup_page_entry

3.2.) Loading Process:
A page/frame to write the data in will be allocated using vm_frame_allocate.
Palloc_get_page will try to acquire a free page first. If this physical 
address is NULL we need to evict a page by calling vm_evict_page (explained 
in more detail later on) which returns a physical address, which is now free.
After receiving a physical address we save it in the sup_page_entry and create
a new struct frame which is linked to this sup_page now and insert it into the 
frame list.
After receiving the frame we read the data from our file to the frame/physical
address release the locks. 
Afterwards the page will be installed in the current thread using 
install_page. This will make sure that the thread can now use this information.
During the entire loading process, the frame is pinned which makes it impossible
to be evicted during the loading process.

3.3.) 
The instruction which caused the page fault will be executed again.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

coordinating these accesses is not important because we did not implement
shared memory. We just used the provided functions by pagedir.

Special Design for Kernel Page faults:
To avoid issues when handling a page fault which occured in kernel We
make sure to save the ESP whenever a syscall occurs. This is important
to make sure that we are able to access the stack pointer to verify
if a stack_grow is valid. After the syscall returnes we reset this
saved ESP (which is stored inside the thread) to null again to make
sure that it is only used whenever a page fault occurs during a syscall.

In all other cases we completely avoid page faults in the kernel
by making sure that all accesses are legal user adresses in every
single syscall. TO do so we check the esp and validate all buffers 
and strings entirely. In order to do so we check if the address is 
in user virtual memory and if there already exists a sup_page_entry. 
Furthermore, we load and pin all the pages in the start of each 
syscall and unpin the pages when the syscall ends. This ensures
that none of these pages can be evicted while the syscall is still
running. This way we can avoid all page faults (except for stack_grow)
entirely.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We have a global frame_lock which avoids races on our entire frame
structure. This is unavoidable because the frame list is global, and
used by all running threads.
In more detail, there is only one possibility to get a frame 
(by calling vm_frame_allocate). 
This function directly acquires the frame_lock and holds it until it returns. 
Only within this function vm_evict_page could be called which assures
that for every eviction the frame lock will be held (we additionally
assert this).
This ensures that only one user can get a new frame at the same time.
Furthermore, there is only one function which deletes frames, called
vm_frame_free which also acquires the lock at the very beginning.
Furthermore frames are manually freed and removed from the frame list
in vm_evict_page but this is okay because the lock is held in this case.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We decided to take a hashmap to store sup_page_entry's because we will
often perform a lookup on supplemental pages and this is very efficient
using a hashmap. Furthermore, we only have to iterate over all pages in the
case of a process exit, however this function is also efficiently supported
if the hashmap will be deleted.
Furthermore we need the page_lock in each sup_page because the status of a 
page could change during a page eviction which is done by a different thread.
To ensure that all writes and reads of fields in the sup_page_entry are
synchroized correctly this lock is necessary.
Furthermore, a supplemental page needs to store its current state and 
its type to handle the page correctly. Since there are 3 possibile states 
and 3 types we decided to use enums to avoid using different structs or 
many boolean values.
The corresponding virtual address and file information have to be stored 
to load the correct page lazily on access.
The mmap_id field is needed to handle munmap on sup_pages of type MMAP.
The boolean pinned is used to prevent eviction of this page during a loading
process and during syscall (as explained above). This is done to avoid 
page faults in kernel while accessing user memory (e.g. buffer). Because
these kind of page faults cannot be easilily resolved (e.g. because of 
held locks).

Frames are stored in a list because we will often iterate over all allocated
frames during a page eviction. Furthermore, we often add and delete frames,
this is also efficient using lists and we don't need any efficient lookups
on frames on some key, so using a hashmap would be unnecessary.
Frames of course have to store their location (physical address) and the
corresponding sup_page (sup_page_entry). The frame_lock is needed to avoid
races in case of 2 user processes trying to allocate a new frame at the
same time.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In swap:
- static struct block *swap: block which is used as swap partition

- static unsigned swap_size: stores how many pages can be contained
in the swap-block

- static uint32_t SECTORS_FOR_PAGE = PGSIZE / BLOCK_SECTOR_SIZE:
 Number of sectors necessary to store an entire page

- static struct bitmap *swap_free_bitmap: bitmap used to indicate
which swap slots are in use and which are free

- static struct lock swap_lock: lock to ensure safe swap in and out

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We use the clock algorithm to evict frames. In more detail:
We save a global iterator which points to the next element in the frame
list which will be considered to check for page eviction. This is 
necessary to ensure that the algorithm starts at the point it stopped
in the last iteration.
In the eviction step we start at the mentioned iterator position and
iterate until we find a valid page to evict.
In order to do so we first check if the page is pinned. In the case
that the page is pinned we move the iterator to the next element in 
the list using vm_evict_page_next_iterator (If we reach the end of the
frame list the iterator is set to the begin of the list).
In case of an unpinned page we take the page_lock of this page and
check if the access bit is set. If it is set we set it to false,  release
the lock and move to the next element using vm_evict_page_next_iterator.
Otherwise, the page can be evicted. This is done by checking the page
type and calling the correct eviction function. 
A) A stack is evicted using vm_evict_stack which writes the page content 
   to the swap partition and sets the status of the sup_page_entry to 
   PAGE_STATUS_SWAPPED.
B) A file is evicted using vm_evict_file. This function checks if the page
   is dirty and writes it to swap if necessary and sets the page status
   either to swapped or not loaded.
C) A memory mapped file page is written back to the file if the page is dirty
   and the page status is set to not_loaded independent of the dirty bit.

  Independent of the page type the following happens:
1.) The physical address of the page is set to NULL
2.) The page is removed from the process pagedir using pagedir_clear_page
3.) We relase the sup_page lock
4.) The frame is removed from the frame list.
5.) We move the iterator to the next element in the list.
6.) The physical page is freed using palloc_free_page
7.) The struct frame is freed
8.) A new physical page is allocated and its physical address is returned
to vm_frame_allocate (vm_evict_page was called by vm_frame_allocate)

The gloabal iterator is also moved if the frame it currently points to
will be deleted (only possible using vm_frame_free) because in this case
we check if the deleted frame is the current iterator frame and the move
the iterator accordingly.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

As already mentioned in this case we set the page status of the sup_page_entry
of process Q to either swapped or not_loaded (depends on the dirty bit and the
page type) and the phys_addr to NULL. Furthermore, the entry in the page
directory of the corresponding thread is cleared, this will ensure that thread
Q no longer has access to this frame.
The frame itself is removed from the frame_list and the physical page is
freed by using palloc_free_page and the struct frame is freed.
Process P gets a new physical page which is allocated using palloc_get_page.
This page will only be installed in the pagedir of P, which makes it 
impossible for any other thread to access it.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

If a page fault occurs and there is no supplemental page table which
contains the requested virtual adress we have to check if a stack_growth
is valid. This is done by checking if the fault adress is between PHYS_BASE
and esp-32. Additionally we have to verify that the stack does not grow
further than its maximum size, which is set to 8 Megabytes in our case
as suggested in the Project description.



---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

1) We allow for shared access of ressources (for example frame list
is shared for all threads/sup_pages).
2) No preemption is obviously fullfilled with the lock implementation
3) The eviction holds the Frame lock, and can possibly wait for the
lock of one sup_page because the thread to which this sup_page belongs
currently changes fields of the sup_page. Evict will continue as soon as
all changes to the sup_page struct have been performed (and the lock will
be acquired)
4) Circularities: (dynamic condition)
It is impossible for circularities to occur because the frame lock
is always acquired before any of the sup_page locks except for 1 special case:
During the eviction we already hold the lock for the sup page for which
we are trying to get a physical page. Because each frame only corresponds
one sup_page and one sup_page corresponds to at most one frame, there cannot
be a frame contained in the frame list which corresponds to the sup_page of
which we already hold the lock when the eviction starts. Because we can 
only acquire the locks of sup pages which have currently loaded frames 
during an eviction process. This means that it is impossible to achieve
a circularity during the eviction.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

The eviction process will always hold the frame_lock. As soon as the Q's
Page will be uninstalled a page fault in Q will occur whenever Q tries to read
or write from the page and Q will try to load the evicted page again. 
This loading also has to acquire the frame_lock. This means that it can 
only start after the eviction process is  completed entirely. 
The reading and changing of values (e.g. status of the page changes from 
PAGE_STATUS_LOADED to PAGE_STATUS_SWAPPED/NOT_LOADED) is  additionally 
synchronized to avoid data races (explained in more detail in other answers).

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Frames which are currently being read in are not contained in the 
frame_list because they are only inserted after the read is completely
finished. This insertion is protected using the Frame_lock, which has
to be held during the entire eviciton process. This means a currently
loading page can never be evicted!

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

In syscall we make sure to load AND pin all necessary data (strings/
buffers) during the verification of these structures. This assures
that these strings/buffers can not be evicted during the syscall because
evict will not consider any pinned pages (important: setting pinned
to true/false is synchronized using the pages page_lock).
As soon as the syscall is finished we set the pinned value for all
previously pinned pages of this syscall to false, which means they 
could possibly be evicted again.
Additially we make sure to store the ESP at the beginning of each
syscall to be able to access it during a page fault in this syscall,
so we can check the conditions to perform a stack_growth.


---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We offer very efficient locking. It is quite clear that we have to acquire
and hold the frame_lock during the entire frame allocation process (which
might contain an evict process) and also during the frame free process.
This is essential, because all threads work on the same list of Frames, and
e.g. Frames which are not yet completely loaded are not allowed to be evicted
etc.
The other lock which is absolutely necessary is a lock which protects
all the fields of a sup_page. This might not seem necessary at first
glance but not only the thread to which the sup_page belongs writes
into its fields but also other threads which might access this sup_page
during an eviction process will read (and potentially change) values of 
its fields. Its clear that the struct has to be protected against these 
data races and therefore both read and write accesses on a sup_page 
have to be protected using a lock. 
The list of sup_pages in each thread doesnt have to be protected using 
a lock beacuse only the thread to which this sup_page list belongs will
work on/modify this list using the sup_page allocation and the removal
of sup_pages (e.g. during termination of said thread).
All this could be done only using the Frame_lock but this would severely




			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h: 

struct mmap_entry
  {
    void* start_vaddr;
    unsigned needed_pages;
    mapid_t mmap_id;
    struct hash_elem h_elem; 
  };

- struct mmap_entry: struct to store all necessary information to manage
mmaped files (in addition to sup_page_entry)

- start_vaddr: stores the virtual address of the first sup_page_entry 
of the mmaped file

- needed_pages: stores how many sup_page_entry structs are used to store
the memory mapped file

- mmap_id: unique id of the mmap file to identify to which mmaped file the
struct mmap_entry belongs to (also used as key of hashmap)

- h_elem: hash_elem to store mmap_entry in a hashmap to ensure fast lookups

In struct thread:

- struct hash mmap_hashmap: hashmap to store all mmap file entries (mmap_entry)
 currently allocated by the process



---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory mapped files are handled in the same way as all other pages are handled.
If a file is memory mapped using mmap we allocate a sup_page_entry struct for
each needed page (code to create all needed sup_page_entry structs is similar
to load_segment). In order to do so we reopen the file, compute the offset and
read bytes and get a unique mmap id. This is used to create all sup_page_entry
structs with page type PAGE_TYPE_MMAP. Furthermore a mmap_entry is created to
perform the munmap function.
If a page fault happens and it is caused by an mmap file a sup_page_entry 
will already exist and be found. Afterwards we call vm_load_page with this
sup_page_entry. Since a mmap file can only be loaded or unloaded but never
swapped we enter the PAGE_STATUS_NOT_LOADED case and call vm_load_file 
because there is no difference necessarry in loading a "normal file" or 
a mmaped file in out implementation.

A page eviction on mmaped files is different to the page fault caused by
"normal files" or the stack.
A stack page is always swapped to the swap partition wheneve it is evicted.
The same holds for a dirty sup_page_entry of type file (file which is not 
dirty doesn't have to be swapped because it can simply be loaded from the 
file again, just like the first load).
A memory mapped file is written back to the file during eviction if the page 
was dirty. Independent of the dirty bit the status is set to not_loaded 
becuase the page has to be loaded from the file whenever it is accessed
again.


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

In order to check if a new file mapping overlaps any existing segment
we compute how many pages are needed to store the file and then we check
for every single page if the page is below the stack pointer, in user
virtual address space and if a sup_page_entry exists at the given virtual
memory address. If we find a sup_page_entry at the address or the address
overlaps with the stack pointer or the address is not in user virtual
address space the mmap returns with -1 and no pages are allocated.

(In case the question refers to overlapping of frames, this is obviously
impossible because each sup_page_entry belonging to a MMAP file refers
to at most one single frame which is allocated using vm_frame_allocate,
which obviously never creates overlappings (explained in detail above))

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Memory mapped files and normal (executable) files are loaded in the same 
way with the same function, because there is no difference in the loading 
process in both cases the content is read to the page at a given offset.
Furthermore, both types are stored in the same sup_page_entry struct because
only the page type differs (same struct but different type).
In order to share as much code as possible vm_load_page checks the status
of the page and uses vm_load_swap to swap back content to physical pages but
this is only used in case of files or the stack because memory mapped files
are never swapped.
However, there exists a vm_write_mmap_back function to write back possible
changes back to the file in case of page eviction or process termination.
That means we switch over the page types in page eviction in order to handle
the differences between stack, files and mmaped files. And call 
vm_write_mmap_back (checks if page is dirty) only in case of mmaped files.
Furthermore, there different code to delete sup_page_entry structs in case
of process termination. Because only in case of a memory mapped file the
content is written back to the file using vm_write_mmap_back.
So the only differences are:
1) writing back to the file in case of MMAP
2) writing to swap in case of FILE
+ the additional MMAP-entry struct which is created for all MMAPs and does
not exist for regular (executable) files.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
